/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');

const app = express();
const port = 3000;

const todosFilePath = path.join(__dirname, 'todos.json');
let todos = [];

// Load existing todos from file
try {
  const todosData = fs.readFileSync(todosFilePath, 'utf8');
  todos = JSON.parse(todosData);
} catch (error) {
  // File does not exist or is invalid, initialize with an empty array
  todos = [];
}

// Middleware to save todos to file after each request
app.use((req, res, next) => {
  fs.writeFileSync(todosFilePath, JSON.stringify(todos), 'utf8');
  next();
});

// Middleware to handle CORS (Cross-Origin Resource Sharing)
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
  res.header('Access-Control-Allow-Headers', 'Content-Type');
  next();
});

app.use(bodyParser.json());

// Endpoint 1: GET /todos - Retrieve all todo items
app.get('/todos', (req, res) => {
  res.status(200).json(todos);
});

// Endpoint 2: GET /todos/:id - Retrieve a specific todo item by ID
app.get('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const todo = todos.find((todo) => todo.id === id);

  if (todo) {
    res.status(200).json(todo);
  } else {
    res.status(404).send('Not Found');
  }
});

// Endpoint 3: POST /todos - Create a new todo item
app.post('/todos', (req, res) => {
  const newTodo = {
    id: todos.length + 1,
    title: req.body.title,
    completed: req.body.completed || false,
    description: req.body.description || '',
  };

  todos.push(newTodo);
  res.status(201).json({ id: newTodo.id });
});

// Endpoint 4: PUT /todos/:id - Update an existing todo item by ID
app.put('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const updatedTodoIndex = todos.findIndex((todo) => todo.id === id);

  if (updatedTodoIndex !== -1) {
    todos[updatedTodoIndex] = {
      id,
      title: req.body.title || todos[updatedTodoIndex].title,
      completed: req.body.completed || todos[updatedTodoIndex].completed,
      description: req.body.description || todos[updatedTodoIndex].description,
    };
    res.status(200).send('OK');
  } else {
    res.status(404).send('Not Found');
  }
});

// Endpoint 5: DELETE /todos/:id - Delete a todo item by ID
app.delete('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const deletedTodoIndex = todos.findIndex((todo) => todo.id === id);

  if (deletedTodoIndex !== -1) {
    todos.splice(deletedTodoIndex, 1);
    res.status(200).send('OK');
  } else {
    res.status(404).send('Not Found');
  }
});

// Default handler for undefined routes
app.use((req, res) => {
  res.status(404).send('Not Found');
});

// Start the server
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});

module.exports = app;
